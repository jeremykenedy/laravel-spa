/* eslint-disable */
// prettier-ignore

const Konami=function(t){var e={addEvent:function(t,e,i,s){t.addEventListener?t.addEventListener(e,i,!1):t.attachEvent&&(t["e"+e+i]=i,t[e+i]=function(){t["e"+e+i](window.event,s)},t.attachEvent("on"+e,t[e+i]))},input:"",pattern:"38384040373937396665",load:function(t){this.addEvent(document,"keydown",function(i,s){if(s&&(e=s),e.input+=i?i.keyCode:event.keyCode,e.input.length>e.pattern.length&&(e.input=e.input.substr(e.input.length-e.pattern.length)),e.input==e.pattern)return e.code(t),e.input="",i.preventDefault(),!1},this),this.iphone.load(t)},code:function(t){window.location=t},iphone:{start_x:0,start_y:0,stop_x:0,stop_y:0,tap:!1,capture:!1,orig_keys:"",keys:["UP","UP","DOWN","DOWN","LEFT","RIGHT","LEFT","RIGHT","TAP","TAP",],code:function(t){e.code(t)},load:function(t){this.orig_keys=this.keys,e.addEvent(document,"touchmove",function(t){if(1==t.touches.length&&!0==e.iphone.capture){let i=t.touches[0];e.iphone.stop_x=i.pageX,e.iphone.stop_y=i.pageY,e.iphone.tap=!1,e.iphone.capture=!1,e.iphone.check_direction()}}),e.addEvent(document,"touchend",function(i){!0==e.iphone.tap&&e.iphone.check_direction(t)},!1),e.addEvent(document,"touchstart",function(t){e.iphone.start_x=t.changedTouches[0].pageX,e.iphone.start_y=t.changedTouches[0].pageY,e.iphone.tap=!0,e.iphone.capture=!0})},check_direction:function(t){x_magnitude=Math.abs(this.start_x-this.stop_x),y_magnitude=Math.abs(this.start_y-this.stop_y),x=this.start_x-this.stop_x<0?"RIGHT":"LEFT",y=this.start_y-this.stop_y<0?"DOWN":"UP",result=x_magnitude>y_magnitude?x:y,(result=!0==this.tap?"TAP":result)==this.keys[0]&&(this.keys=this.keys.slice(1,this.keys.length)),0==this.keys.length&&(this.keys=this.orig_keys,this.code(t))}}};return"string"==typeof t&&e.load(t),"function"==typeof t&&(e.code=t,e.load()),e};
function loadScript(t, e) {
  let i = document.getElementsByTagName('head')[0],
    s = document.createElement('script');
  (s.type = 'text/javascript'),
    (s.src = t),
    (s.onreadystatechange = e),
    (s.onload = e),
    i.appendChild(s);
}
const easter_egg = new Konami(function () {
  go_astroid();
});
function go_astroid() {
  function t() {
    function t(t, e) {
      'Object' == typeof t
        ? ((this.x = t.x), (this.y = t.y))
        : ((this.x = t), (this.y = e));
    }
    function e(t, e) {
      (this.p1 = t), (this.p2 = e);
    }
    window.ASTEROIDS ||
      (window.ASTEROIDS = {
        enemiesKilled: 0,
        startedPlaying: new Date().getTime(),
      }),
      (t.prototype = {
        cp: function () {
          return new t(this.x, this.y);
        },
        mul: function (t) {
          return (this.x *= t), (this.y *= t), this;
        },
        mulNew: function (e) {
          return new t(this.x * e, this.y * e);
        },
        add: function (t) {
          return (this.x += t.x), (this.y += t.y), this;
        },
        addNew: function (e) {
          return new t(this.x + e.x, this.y + e.y);
        },
        sub: function (t) {
          return (this.x -= t.x), (this.y -= t.y), this;
        },
        subNew: function (e) {
          return new t(this.x - e.x, this.y - e.y);
        },
        rotate: function (t) {
          let e = this.x,
            i = this.y;
          return (
            (this.x = e * Math.cos(t) - Math.sin(t) * i),
            (this.y = e * Math.sin(t) + Math.cos(t) * i),
            this
          );
        },
        rotateNew: function (t) {
          return this.cp().rotate(t);
        },
        setAngle: function (t) {
          let e = this.len();
          return (this.x = Math.cos(t) * e), (this.y = Math.sin(t) * e), this;
        },
        setAngleNew: function (t) {
          return this.cp().setAngle(t);
        },
        setLength: function (t) {
          let e = this.len();
          return e ? this.mul(t / e) : (this.x = this.y = t), this;
        },
        setLengthNew: function (t) {
          return this.cp().setLength(t);
        },
        normalize: function () {
          let t = this.len();
          return (this.x /= t), (this.y /= t), this;
        },
        normalizeNew: function () {
          return this.cp().normalize();
        },
        angle: function () {
          return Math.atan2(this.y, this.x);
        },
        collidesWith: function (t) {
          return (
            this.x > t.x &&
            this.y > t.y &&
            this.x < t.x + t.width &&
            this.y < t.y + t.height
          );
        },
        len: function () {
          let t = Math.sqrt(this.x * this.x + this.y * this.y);
          return t < 0.005 && t > -0.005 ? 0 : t;
        },
        is: function (t) {
          return 'object' == typeof t && this.x == t.x && this.y == t.y;
        },
        toString: function () {
          return (
            '[Vector(' +
            this.x +
            ', ' +
            this.y +
            ') angle: ' +
            this.angle() +
            ', length: ' +
            this.len() +
            ']'
          );
        },
      }),
      (e.prototype = {
        shift: function (t) {
          this.p1.add(t), this.p2.add(t);
        },
        intersectsWithRect: function (i) {
          let s = new t(i.x, i.y + i.height),
            n = new t(i.x, i.y),
            o = new t(i.x + i.width, i.y + i.height),
            h = new t(i.x + i.width, i.y);
          return !!(
            (this.p1.x > s.x &&
              this.p1.x < h.x &&
              this.p1.y < s.y &&
              this.p1.y > h.y &&
              this.p2.x > s.x &&
              this.p2.x < h.x &&
              this.p2.y < s.y &&
              this.p2.y > h.y) ||
            this.intersectsLine(new e(n, s)) ||
            this.intersectsLine(new e(s, o)) ||
            this.intersectsLine(new e(n, h)) ||
            this.intersectsLine(new e(h, o))
          );
        },
        intersectsLine: function (t) {
          let e = this.p1,
            i = this.p2,
            s = t.p1,
            n = t.p2,
            o = (n.y - s.y) * (i.x - e.x) - (n.x - s.x) * (i.y - e.y),
            h = (n.x - s.x) * (e.y - s.y) - (n.y - s.y) * (e.x - s.x),
            l = (i.x - e.x) * (e.y - s.y) - (i.y - e.y) * (e.x - s.x);
          if (0 == o) return !1;
          let a = h / o,
            r = l / o;
          return a >= 0 && a <= 1 && r >= 0 && r <= 1;
        },
      }),
      (function t() {}.prototype = {
        build: function () {
          let t = this,
            e =
              document.clientWidth ||
              window.innerWidth ||
              document.documentElement.clientWidth,
            i =
              document.clientHeight ||
              window.innerHeight ||
              document.documentElement.clientHeight;
          (this.container = document.createElement('div')),
            (this.container.className = 'ASTEROIDSYEAH'),
            (this.container.style.position = 'fixed'),
            (this.container.style.top = parseInt(i / 2 - 250, 10) + 'px'),
            (this.container.style.left = parseInt(e / 2 - 250, 10) + 'px'),
            (this.container.style.width = '500px'),
            (this.container.style.height = '500px'),
            (this.container.style.boxShadow = '0 0 25px #000'),
            (this.container.style.MsBoxShadow = '0 0 25px #000'),
            (this.container.style.OBoxShadow = '0 0 25px #000'),
            (this.container.style.MozBoxShadow = '0 0 25px #000'),
            (this.container.style.WebkitBoxShadow = '0 0 25px #000'),
            (this.container.style.zIndex = '1000002'),
            (this.container.style.background = '#222'),
            document.body.appendChild(this.container),
            (this.iframe = document.createElement('iframe')),
            (this.iframe.className = 'ASTEROIDSYEAH'),
            (this.iframe.width = this.iframe.height = 500),
            (this.iframe.frameBorder = 0),
            this.container.appendChild(this.iframe),
            (this.close = document.createElement('a')),
            (this.close.href = '#'),
            (this.close.onclick = function () {
              return t.hide(), !1;
            }),
            (this.close.innerHTML = 'X'),
            (this.close.style.position = 'absolute'),
            (this.close.style.display = 'block'),
            (this.close.style.padding = '2px 6px'),
            (this.close.style.top = '-12px'),
            (this.close.style.right = '-12px'),
            (this.close.style.background = '#222'),
            (this.close.style.border = '3px solid #fff'),
            (this.close.style.boxShadow = '1px 1px 5px #000'),
            (this.close.style.color = '#fff'),
            (this.close.style.textAlign = 'center'),
            (this.close.style.borderRadius = '24px'),
            (this.close.style.outline = 'none'),
            (this.close.style.textDecoration = 'none'),
            (this.close.style.fontFamily = 'Verdana'),
            (this.close.style.fontSize = '16px'),
            (this.close.style.fontWeight = 'bold'),
            (this.close.style.zIndex = '10003'),
            this.container.appendChild(this.close),
            this.hide(),
            document.body.appendChild(this.container);
        },
        show: function () {
          this.build(),
            (this.container.style.display = 'block'),
            setTimeout(function () {}, 50),
            this.sendScore();
        },
        hide: function () {
          this.container &&
            this.container.parentNode &&
            this.container.parentNode.removeChild(this.container);
        },
        sendScore: function () {
          let t = new Date().getTime() - window.ASTEROIDS.startedPlaying;
          this.iframe.src =
            p +
            '?asd=' +
            (10 * window.ASTEROIDS.enemiesKilled).toString() +
            '&sad=' +
            escape(document.location.href) +
            '&das=' +
            t;
        },
      });
    let i = this,
      s = !!window.ActiveXObject,
      n = s && 'BackCompat' == document.compatMode,
      o = document.documentElement.clientWidth,
      h = document.documentElement.clientHeight;
    n && ((o = document.body.clientWidth), (h = document.body.clientHeight));
    let l = [
        [-15, -10],
        [-15, 10],
        [15, 0],
      ],
      a = ['HTML', 'HEAD', 'BODY', 'SCRIPT', 'TITLE', 'META', 'STYLE', 'LINK'];
    window.ActiveXObject &&
      (a = [
        'HTML',
        'HEAD',
        'BODY',
        'SCRIPT',
        'TITLE',
        'META',
        'STYLE',
        'LINK',
        'SHAPE',
        'LINE',
        'GROUP',
        'IMAGE',
        'STROKE',
        'FILL',
        'SKEW',
        'PATH',
        'TEXTPATH',
        'INS',
      ]);
    let r = ['BR', 'HR'],
      c = s ? 20 : 40,
      d = s ? 10 : 20;
    var p = '/highscores/';
    function u() {
      for (var t, e = 0; (t = i.enemies[e]); e++) R(t, 'ASTEROIDSYEAHENEMY');
      let s = document.body.getElementsByTagName('*');
      i.enemies = [];
      for (var n, e = 0; (n = s[e]); e++)
        -1 == N(a, n.tagName.toUpperCase()) &&
          'g_vml_' != n.prefix &&
          k(n) &&
          'ASTEROIDSYEAH' != n.className &&
          n.offsetHeight > 0 &&
          ((n.aSize = S(n)),
          i.enemies.push(n),
          O(n, 'ASTEROIDSYEAHENEMY'),
          !n.aAdded && ((n.aAdded = !0), i.totalEnemies++));
    }
    (this.flame = { r: [], y: [] }),
      (this.toggleBlinkStyle = function () {
        this.updated.blink.isActive
          ? R(document.body, 'ASTEROIDSBLINK')
          : O(document.body, 'ASTEROIDSBLINK'),
          (this.updated.blink.isActive = !this.updated.blink.isActive);
      }),
      (function t(e, i) {
        let s = document.createElement('style');
        (s.type = 'text/css'),
          (s.rel = 'stylesheet'),
          (s.id = 'ASTEROIDSYEAHSTYLES');
        try {
          s.innerHTML = e + '{' + i + '}';
        } catch (n) {
          s.styleSheet.addRule(e, i);
        }
        document.getElementsByTagName('head')[0].appendChild(s);
      })('.ASTEROIDSBLINK .ASTEROIDSYEAHENEMY', 'outline: 2px dotted red;'),
      (this.pos = new t(100, 100)),
      (this.lastPos = !1),
      (this.vel = new t(0, 0)),
      (this.dir = new t(0, 1)),
      (this.keysPressed = {}),
      (this.firedAt = !1),
      (this.updated = {
        enemies: !1,
        flame: new Date().getTime(),
        blink: { time: 0, isActive: !1 },
      }),
      (this.scrollPos = new t(0, 0)),
      (this.bullets = []),
      (this.enemies = []),
      (this.dying = []),
      (this.totalEnemies = 0),
      (this.particles = []),
      u();
    let $;
    function f(t) {
      return 0.0174532925 * t;
    }
    function g(t) {
      return 57.2957795 * t;
    }
    function m(t, e) {
      return Math.floor(Math.random() * (e + 1) + t);
    }
    function E(t) {
      let e = { up: 38, down: 40, left: 37, right: 39, esc: 27 };
      return e[t] ? e[t] : t.charCodeAt(0);
    }
    function v(t) {
      t.x > o ? (t.x = 0) : t.x < 0 && (t.x = o),
        t.y > h ? (t.y = 0) : t.y < 0 && (t.y = h);
    }
    function S(t) {
      let e = t,
        i = 0,
        s = 0;
      do
        (i += e.offsetLeft || 0), (s += e.offsetTop || 0), (e = e.offsetParent);
      while (e);
      return {
        x: i,
        y: s,
        width: t.offsetWidth || 10,
        height: t.offsetHeight || 10,
      };
    }
    function _(t, e, i) {
      t.addEventListener
        ? t.addEventListener(e, i, !1)
        : t.attachEvent &&
          ((t['e' + e + i] = i),
          (t[e + i] = function () {
            t['e' + e + i](window.event);
          }),
          t.attachEvent('on' + e, t[e + i]));
    }
    function A(t, e, i) {
      t.removeEventListener
        ? t.removeEventListener(e, i, !1)
        : t.detachEvent &&
          (t.detachEvent('on' + e, t[e + i]),
          (t[e + i] = null),
          (t['e' + e + i] = null));
    }
    function T(t, e, i) {
      let s = t.slice((i || e) + 1 || t.length);
      return (t.length = e < 0 ? t.length + e : e), t.push.apply(t, s);
    }
    function b(t) {
      for (var e, i = 0; (e = window.ASTEROIDSPLAYERS[i]); i++)
        e.gameContainer.style.visibility = t;
    }
    function w(t, e) {
      b('hidden');
      let i = document.elementFromPoint(t, e);
      return i
        ? (3 == i.nodeType && (i = i.parentNode), b('visible'), i)
        : (b('visible'), !1);
    }
    function I(e) {
      let s = new Date().getTime(),
        n = c;
      for (let o = 0; o < n; o++)
        i.particles.push({
          dir: new t(
            20 * Math.random() - 10,
            20 * Math.random() - 10,
          ).normalize(),
          pos: e.cp(),
          cameAlive: s,
        });
    }
    function P() {
      i.points.innerHTML = 10 * window.ASTEROIDS.enemiesKilled;
    }
    function k(t) {
      if (t.offsetLeft < -100 && t.offsetWidth > 0 && t.offsetHeight > 0)
        return !1;
      if (-1 != N(r, t.tagName)) return !0;
      if (0 == t.offsetWidth && 0 == t.offsetHeight) return !1;
      for (let e = 0; e < t.childNodes.length; e++)
        if (
          -1 == N(r, t.childNodes[e].tagName) &&
          0 != t.childNodes[e].childNodes.length
        )
          return !1;
      return !0;
    }
    function N(t, e, i) {
      if (t.indexOf) return t.indexOf(e, i);
      let s = t.length;
      for (let n = i < 0 ? Math.max(0, s + i) : i || 0; n < s; n++)
        if (t[n] === e) return n;
      return -1;
    }
    function O(t, e) {
      -1 == t.className.indexOf(e) &&
        (t.className = (t.className + ' ' + e)
          .replace(/\s+/g, ' ')
          .replace(/^\s+|\s+$/g, ''));
    }
    function R(t, e) {
      t.className = t.className.replace(
        RegExp('(^|\\s)' + e + '(?:\\s|$)'),
        '$1',
      );
    }
    !(function () {
      let t = 2.4000000000000004,
        e = 6;
      $ = function () {
        (i.flame.r = [[-15, -10]]), (i.flame.y = [[-15, -1 * e]]);
        for (var s = 0; s < 20; s += 2) i.flame.r.push([-m(2, 7) - 15, s - 10]);
        i.flame.r.push([-15, 10]);
        for (var s = 0; s < 12; s += t) i.flame.y.push([-m(2, 7) - 15, s - e]);
        i.flame.y.push([-15, e]);
      };
    })(),
      $(),
      (this.gameContainer = document.createElement('div')),
      (this.gameContainer.className = 'ASTEROIDSYEAH'),
      document.body.appendChild(this.gameContainer),
      (this.canvas = document.createElement('canvas')),
      this.canvas.setAttribute('width', o),
      this.canvas.setAttribute('height', h),
      (this.canvas.className = 'ASTEROIDSYEAH'),
      (this.canvas.style.width = o + 'px'),
      (this.canvas.style.height = h + 'px'),
      (this.canvas.style.position = 'fixed'),
      (this.canvas.style.top = '0px'),
      (this.canvas.style.left = '0px'),
      (this.canvas.style.bottom = '0px'),
      (this.canvas.style.right = '0px'),
      (this.canvas.style.zIndex = '10000'),
      'undefined' != typeof G_vmlCanvasManager &&
        (this.canvas = G_vmlCanvasManager.initElement(this.canvas)),
      this.canvas.getContext ||
        alert('This program does not yet support your browser.'),
      _(this.canvas, 'mousedown', function (t) {
        t = t || window.event;
        let e = document.createElement('span');
        (e.style.position = 'absolute'),
          (e.style.border = '1px solid #999'),
          (e.style.background = 'white'),
          (e.style.color = 'black'),
          (e.innerHTML = 'Press Esc to quit'),
          document.body.appendChild(e);
        let i = t.pageX || t.clientX + document.documentElement.scrollLeft,
          s = t.pageY || t.clientY + document.documentElement.scrollTop;
        (e.style.left = i - e.offsetWidth / 2 + 'px'),
          (e.style.top = s - e.offsetHeight / 2 + 'px'),
          setTimeout(function () {
            try {
              e.parentNode.removeChild(e);
            } catch (t) {}
          }, 1e3);
      });
    let D = function () {
      s
        ? ((o = document.documentElement.clientWidth),
          (h = document.documentElement.clientHeight),
          n &&
            ((o = document.body.clientWidth), (h = document.body.clientHeight)),
          i.canvas.setAttribute('width', o),
          i.canvas.setAttribute('height', h))
        : ((i.canvas.style.display = 'none'),
          (o = document.documentElement.clientWidth),
          (h = document.documentElement.clientHeight),
          i.canvas.setAttribute('width', o),
          i.canvas.setAttribute('height', h),
          (i.canvas.style.display = 'block'),
          (i.canvas.style.width = o + 'px'),
          (i.canvas.style.height = h + 'px')),
        (V = !0);
    };
    if (
      ((_(window, 'resize', D),
      this.gameContainer.appendChild(this.canvas),
      (this.ctx = this.canvas.getContext('2d')),
      (this.ctx.fillStyle = 'black'),
      (this.ctx.strokeStyle = 'black'),
      document.getElementById('ASTEROIDS-NAVIGATION'))
        ? ((this.navigation = document.getElementById('ASTEROIDS-NAVIGATION')),
          (this.points = document.getElementById('ASTEROIDS-POINTS')))
        : ((this.navigation = document.createElement('div')),
          (this.navigation.id = 'ASTEROIDS-NAVIGATION'),
          (this.navigation.className = 'ASTEROIDSYEAH'),
          (this.navigation.style.fontFamily = 'Arial,sans-serif'),
          (this.navigation.style.position = 'fixed'),
          (this.navigation.style.zIndex = '10001'),
          (this.navigation.style.bottom = '1em'),
          (this.navigation.style.right = '1em'),
          (this.navigation.style.textAlign = 'center'),
          (this.navigation.style.background = '#005a5e'),
          (this.navigation.style.background = 'rgba(0,90,94,.8)'),
          (this.navigation.style.color = '#FFFFFF'),
          (this.navigation.style.padding = '5px'),
          (this.navigation.style.borderRadius = '1px'),
          this.gameContainer.appendChild(this.navigation),
          (this.points = document.createElement('span')),
          (this.points.id = 'ASTEROIDS-POINTS'),
          (this.points.style.font = '28pt Arial, sans-serif'),
          (this.points.style.fontWeight = 'bold'),
          (this.points.style.position = 'relative'),
          (this.points.style.textAlign = 'center'),
          (this.points.className = 'ASTEROIDSYEAH'),
          this.navigation.appendChild(this.points),
          (this.highscoreLink = document.createElement('a')),
          (this.highscoreLink.className = 'ASTEROIDSYEAH'),
          (this.scoreTitle = document.createElement('div')),
          (this.scoreTitle.style.minWidth = '100px'),
          (this.scoreTitle.style.textAlign = 'center'),
          (this.scoreTitle.innerHTML =
            'Score <br /><small>Press "esc" to quit</small>'),
          this.navigation.appendChild(this.scoreTitle)),
      n &&
        (this.gameContainer.style.position =
          this.canvas.style.position =
          this.navigation.style.position =
            'absolute'),
      P(),
      'undefined' != typeof G_vmlCanvasManager)
    ) {
      let L = this.canvas.getElementsByTagName('*');
      for (var C, H = 0; (C = L[H]); H++) O(C, 'ASTEROIDSYEAH');
    }
    let Y = function (t) {
      if (
        !(t = t || window.event).ctrlKey &&
        !t.shiftKey &&
        ((i.keysPressed[t.keyCode] = !0),
        t.keyCode === E(' ') && (i.firedAt = 1),
        -1 !=
          N(
            [
              E('up'),
              E('down'),
              E('right'),
              E('left'),
              E(' '),
              E('B'),
              E('W'),
              E('A'),
              E('S'),
              E('D'),
            ],
            t.keyCode,
          ))
      ) {
        if (!t.ctrlKey && !t.shiftKey)
          return (
            t.preventDefault && t.preventDefault(),
            t.stopPropagation && t.stopPropagation(),
            (t.returnValue = !1),
            (t.cancelBubble = !0),
            !1
          );
      }
    };
    _(document, 'keydown', Y);
    let B = function (t) {
      if (
        ((t = t || window.event),
        -1 !=
          N(
            [
              E('up'),
              E('down'),
              E('right'),
              E('left'),
              E(' '),
              E('W'),
              E('A'),
              E('S'),
              E('D'),
            ],
            t.keyCode || t.which,
          ) &&
          !t.ctrlKey &&
          !t.shiftKey)
      )
        return (
          t.preventDefault && t.preventDefault(),
          t.stopPropagation && t.stopPropagation(),
          (t.returnValue = !1),
          (t.cancelBubble = !0),
          !1
        );
    };
    _(document, 'keypress', B);
    let W = function (t) {
      if (
        ((t = t || window.event),
        (i.keysPressed[t.keyCode] = !1),
        -1 !=
          N(
            [
              E('up'),
              E('down'),
              E('right'),
              E('left'),
              E(' '),
              E('B'),
              E('W'),
              E('A'),
              E('S'),
              E('D'),
            ],
            t.keyCode,
          ))
      )
        return (
          t.preventDefault && t.preventDefault(),
          t.stopPropagation && t.stopPropagation(),
          (t.returnValue = !1),
          (t.cancelBubble = !0),
          !1
        );
    };
    _(document, 'keyup', W),
      (this.ctx.clear = function () {
        this.clearRect(0, 0, o, h);
      }),
      this.ctx.clear(),
      (this.ctx.drawLine = function (t, e, i, s) {
        this.beginPath(),
          this.moveTo(t, e),
          this.lineTo(i, s),
          this.lineTo(i + 1, s + 1),
          this.closePath(),
          this.fill();
      }),
      (this.ctx.tracePoly = function (t) {
        this.beginPath(), this.moveTo(t[0][0], t[0][1]);
        for (let e = 1; e < t.length; e++) this.lineTo(t[e][0], t[e][1]);
        this.closePath();
      });
    let K = !1;
    window.KICKASSIMG &&
      ((K = document.createElement('img')).src = window.KICKASSIMG),
      (this.ctx.drawPlayer = function () {
        K
          ? (this.save(),
            this.translate(i.pos.x, i.pos.y),
            this.rotate(i.dir.angle() + Math.PI / 2),
            this.drawImage(K, -K.width / 2, -K.height / 2),
            this.restore())
          : (this.save(),
            this.translate(i.pos.x, i.pos.y),
            this.rotate(i.dir.angle()),
            this.tracePoly(l),
            (this.fillStyle = 'white'),
            this.fill(),
            this.tracePoly(l),
            this.stroke(),
            this.restore());
      });
    let M = 2 * Math.PI;
    (this.ctx.drawBullets = function (t) {
      for (let e = 0; e < t.length; e++)
        this.beginPath(),
          this.arc(t[e].pos.x, t[e].pos.y, 2, 0, M, !0),
          this.closePath(),
          this.fill();
    }),
      (this.ctx.drawParticles = function (t) {
        let e = this.fillStyle;
        for (let i = 0; i < t.length; i++)
          (this.fillStyle = ['red', 'yellow'][m(0, 1)]),
            this.drawLine(
              t[i].pos.x,
              t[i].pos.y,
              t[i].pos.x - 10 * t[i].dir.x,
              t[i].pos.y - 10 * t[i].dir.y,
            );
        this.fillStyle = e;
      }),
      (this.ctx.drawFlames = function (t) {
        if (K) return;
        this.save(),
          this.translate(i.pos.x, i.pos.y),
          this.rotate(i.dir.angle());
        let e = this.strokeStyle;
        (this.strokeStyle = 'red'),
          this.tracePoly(t.r),
          this.stroke(),
          (this.strokeStyle = 'yellow'),
          this.tracePoly(t.y),
          this.stroke(),
          (this.strokeStyle = e),
          this.restore();
      });
    try {
      window.focus();
    } catch (F) {}
    I(this.pos), O(document.body, 'ASTEROIDSYEAH');
    let z = !0,
      G = new Date().getTime();
    var V = !1;
    this.update = function () {
      let t = new Date().getTime(),
        e = (t - G) / 1e3;
      G = t;
      let s = !1;
      if (
        (t - this.updated.flame > 50 && ($(), (this.updated.flame = t)),
        (this.scrollPos.x =
          window.pageXOffset || document.documentElement.scrollLeft),
        (this.scrollPos.y =
          window.pageYOffset || document.documentElement.scrollTop),
        this.keysPressed[E('up')] || this.keysPressed[E('W')]
          ? (this.vel.add(this.dir.mulNew(300 * e)), (s = !0))
          : this.vel.mul(0.96),
        (this.keysPressed[E('left')] || this.keysPressed[E('A')]) &&
          ((V = !0), this.dir.rotate(f(-(360 * e * 1)))),
        (this.keysPressed[E('right')] || this.keysPressed[E('D')]) &&
          ((V = !0), this.dir.rotate(f(360 * e))),
        this.keysPressed[E(' ')] &&
          t - this.firedAt > 150 &&
          (this.bullets.unshift({
            dir: this.dir.cp(),
            pos: this.pos.cp(),
            startVel: this.vel.cp(),
            cameAlive: t,
          }),
          (this.firedAt = t),
          this.bullets.length > d && this.bullets.pop()),
        this.keysPressed[E('B')]
          ? (this.updated.enemies || (u(), (this.updated.enemies = !0)),
            (V = !0),
            (this.updated.blink.time += 1e3 * e),
            this.updated.blink.time > 250 &&
              (this.toggleBlinkStyle(), (this.updated.blink.time = 0)))
          : (this.updated.enemies = !1),
        this.keysPressed[E('esc')])
      ) {
        location.reload(), U.apply(this);
        return;
      }
      this.vel.len() > 600 && this.vel.setLength(600),
        this.pos.add(this.vel.mulNew(e)),
        this.pos.x > o
          ? (window.scrollTo(this.scrollPos.x + 50, this.scrollPos.y),
            (this.pos.x = 0))
          : this.pos.x < 0 &&
            (window.scrollTo(this.scrollPos.x - 50, this.scrollPos.y),
            (this.pos.x = o)),
        this.pos.y > h
          ? (window.scrollTo(this.scrollPos.x, this.scrollPos.y + 0.75 * h),
            (this.pos.y = 0))
          : this.pos.y < 0 &&
            (window.scrollTo(this.scrollPos.x, this.scrollPos.y - 0.75 * h),
            (this.pos.y = h));
      for (var l = this.bullets.length - 1; l >= 0; l--) {
        if (t - this.bullets[l].cameAlive > 2e3) {
          this.bullets.splice(l, 1), (V = !0);
          continue;
        }
        let r = this.bullets[l].dir
          .setLengthNew(700 * e)
          .add(this.bullets[l].startVel.mulNew(e));
        this.bullets[l].pos.add(r), v(this.bullets[l].pos);
        let c = w(this.bullets[l].pos.x, this.bullets[l].pos.y);
        if (
          c &&
          c.tagName &&
          -1 == N(a, c.tagName.toUpperCase()) &&
          k(c) &&
          'ASTEROIDSYEAH' != c.className
        ) {
          (didKill = !0),
            I(this.bullets[l].pos),
            this.dying.push(c),
            this.bullets.splice(l, 1);
          continue;
        }
      }
      if (this.dying.length) {
        for (var l = this.dying.length - 1; l >= 0; l--)
          try {
            this.dying[l].parentNode && window.ASTEROIDS.enemiesKilled++,
              this.dying[l].parentNode.removeChild(this.dying[l]);
          } catch (p) {}
        P(), (this.dying = []);
      }
      for (var l = this.particles.length - 1; l >= 0; l--)
        if (
          (this.particles[l].pos.add(
            this.particles[l].dir.mulNew(400 * e * Math.random()),
          ),
          t - this.particles[l].cameAlive > 1e3)
        ) {
          this.particles.splice(l, 1), (V = !0);
          continue;
        }
      n &&
        ((this.gameContainer.style.left = this.canvas.style.left =
          document.documentElement.scrollLeft + 'px'),
        (this.gameContainer.style.top = this.canvas.style.top =
          document.documentElement.scrollTop + 'px'),
        (this.navigation.style.right = '10px'),
        (this.navigation.style.top =
          document.documentElement.scrollTop +
          document.body.clientHeight -
          this.navigation.clientHeight -
          10 +
          'px')),
        (V ||
          0 != this.bullets.length ||
          0 != this.particles.length ||
          !this.pos.is(this.lastPos) ||
          this.vel.len() > 0) &&
          (this.ctx.clear(),
          this.ctx.drawPlayer(),
          s && this.ctx.drawFlames(i.flame),
          this.bullets.length && this.ctx.drawBullets(this.bullets),
          this.particles.length && this.ctx.drawParticles(this.particles)),
        (this.lastPos = this.pos),
        (V = !1);
    };
    let X = function () {
        i.update.call(i);
      },
      j = setInterval(X, 20);
    function U() {
      clearInterval(j),
        A(document, 'keydown', Y),
        A(document, 'keypress', B),
        A(document, 'keyup', W),
        A(window, 'resize', D),
        (z = !1),
        (function t(e) {
          let i = document.getElementById(e);
          i && i.parentNode.removeChild(i);
        })('ASTEROIDSYEAHSTYLES'),
        R(document.body, 'ASTEROIDSYEAH'),
        this.highscores && this.highscores.hide(),
        this.gameContainer.parentNode.removeChild(this.gameContainer);
    }
  }
  if (
    (window.ASTEROIDSPLAYERS || (window.ASTEROIDSPLAYERS = []),
    window.ActiveXObject && !document.createElement('canvas').getContext)
  ) {
    try {
      let e = document.createElement('script');
      e.setAttribute('type', 'text/xaml'),
        (e.textContent =
          '<?xml version="1.0"?><Canvas xmlns="http://schemas.microsoft.com/client/2007"></Canvas>'),
        document.getElementsByTagName('head')[0].appendChild(e);
    } catch (i) {}
    let s = document.createElement('script');
    s.setAttribute('type', 'text/javascript'),
      (s.onreadystatechange = function () {
        ('loaded' == s.readyState || 'complete' == s.readyState) &&
          'undefined' != typeof G_vmlCanvasManager &&
          (window.ASTEROIDSPLAYERS[window.ASTEROIDSPLAYERS.length] = new t());
      }),
      (s.src = 'excanvas.js'),
      document.getElementsByTagName('head')[0].appendChild(s);
  } else window.ASTEROIDSPLAYERS[window.ASTEROIDSPLAYERS.length] = new t();
}
